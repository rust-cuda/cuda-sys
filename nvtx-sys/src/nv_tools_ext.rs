/* automatically generated by rust-bindgen 0.59.1 */

pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type nvtxRangeId_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvtxStringHandle {
    _unused: [u8; 0],
}
pub type nvtxStringHandle_t = *mut nvtxStringHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvtxDomainHandle {
    _unused: [u8; 0],
}
pub type nvtxDomainHandle_t = *mut nvtxDomainHandle;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum nvtxColorType_t {
    NVTX_COLOR_UNKNOWN = 0,
    NVTX_COLOR_ARGB = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum nvtxMessageType_t {
    NVTX_MESSAGE_UNKNOWN = 0,
    NVTX_MESSAGE_TYPE_ASCII = 1,
    NVTX_MESSAGE_TYPE_UNICODE = 2,
    NVTX_MESSAGE_TYPE_REGISTERED = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nvtxMessageValue_t {
    pub ascii: *const ::std::os::raw::c_char,
    pub unicode: *const wchar_t,
    pub registered: nvtxStringHandle_t,
}
#[test]
fn bindgen_test_layout_nvtxMessageValue_t() {
    assert_eq!(
        ::std::mem::size_of::<nvtxMessageValue_t>(),
        8usize,
        concat!("Size of: ", stringify!(nvtxMessageValue_t))
    );
    assert_eq!(
        ::std::mem::align_of::<nvtxMessageValue_t>(),
        8usize,
        concat!("Alignment of ", stringify!(nvtxMessageValue_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nvtxMessageValue_t>())).ascii as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxMessageValue_t),
            "::",
            stringify!(ascii)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nvtxMessageValue_t>())).unicode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxMessageValue_t),
            "::",
            stringify!(unicode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nvtxMessageValue_t>())).registered as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxMessageValue_t),
            "::",
            stringify!(registered)
        )
    );
}
impl Default for nvtxMessageValue_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum nvtxInitializationMode_t {
    NVTX_INITIALIZATION_MODE_UNKNOWN = 0,
    NVTX_INITIALIZATION_MODE_CALLBACK_V1 = 1,
    NVTX_INITIALIZATION_MODE_CALLBACK_V2 = 2,
    NVTX_INITIALIZATION_MODE_SIZE = 3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct nvtxInitializationAttributes_v2 {
    pub version: u16,
    pub size: u16,
    pub mode: u32,
    pub fnptr: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_nvtxInitializationAttributes_v2() {
    assert_eq!(
        ::std::mem::size_of::<nvtxInitializationAttributes_v2>(),
        16usize,
        concat!("Size of: ", stringify!(nvtxInitializationAttributes_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<nvtxInitializationAttributes_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(nvtxInitializationAttributes_v2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxInitializationAttributes_v2>())).version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxInitializationAttributes_v2),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxInitializationAttributes_v2>())).size as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxInitializationAttributes_v2),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxInitializationAttributes_v2>())).mode as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxInitializationAttributes_v2),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxInitializationAttributes_v2>())).fnptr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxInitializationAttributes_v2),
            "::",
            stringify!(fnptr)
        )
    );
}
pub type nvtxInitializationAttributes_t = nvtxInitializationAttributes_v2;
extern "C" {
    pub fn nvtxInitialize(
        initAttrib: *const nvtxInitializationAttributes_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum nvtxPayloadType_t {
    NVTX_PAYLOAD_UNKNOWN = 0,
    NVTX_PAYLOAD_TYPE_UNSIGNED_INT64 = 1,
    NVTX_PAYLOAD_TYPE_INT64 = 2,
    NVTX_PAYLOAD_TYPE_DOUBLE = 3,
    NVTX_PAYLOAD_TYPE_UNSIGNED_INT32 = 4,
    NVTX_PAYLOAD_TYPE_INT32 = 5,
    NVTX_PAYLOAD_TYPE_FLOAT = 6,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvtxEventAttributes_v2 {
    pub version: u16,
    pub size: u16,
    pub category: u32,
    pub colorType: i32,
    pub color: u32,
    pub payloadType: i32,
    pub reserved0: i32,
    pub payload: nvtxEventAttributes_v2_payload_t,
    pub messageType: i32,
    pub message: nvtxMessageValue_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nvtxEventAttributes_v2_payload_t {
    pub ullValue: u64,
    pub llValue: i64,
    pub dValue: f64,
    pub uiValue: u32,
    pub iValue: i32,
    pub fValue: f32,
}
#[test]
fn bindgen_test_layout_nvtxEventAttributes_v2_payload_t() {
    assert_eq!(
        ::std::mem::size_of::<nvtxEventAttributes_v2_payload_t>(),
        8usize,
        concat!("Size of: ", stringify!(nvtxEventAttributes_v2_payload_t))
    );
    assert_eq!(
        ::std::mem::align_of::<nvtxEventAttributes_v2_payload_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(nvtxEventAttributes_v2_payload_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxEventAttributes_v2_payload_t>())).ullValue as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2_payload_t),
            "::",
            stringify!(ullValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxEventAttributes_v2_payload_t>())).llValue as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2_payload_t),
            "::",
            stringify!(llValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxEventAttributes_v2_payload_t>())).dValue as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2_payload_t),
            "::",
            stringify!(dValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxEventAttributes_v2_payload_t>())).uiValue as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2_payload_t),
            "::",
            stringify!(uiValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxEventAttributes_v2_payload_t>())).iValue as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2_payload_t),
            "::",
            stringify!(iValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxEventAttributes_v2_payload_t>())).fValue as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2_payload_t),
            "::",
            stringify!(fValue)
        )
    );
}
impl Default for nvtxEventAttributes_v2_payload_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_nvtxEventAttributes_v2() {
    assert_eq!(
        ::std::mem::size_of::<nvtxEventAttributes_v2>(),
        48usize,
        concat!("Size of: ", stringify!(nvtxEventAttributes_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<nvtxEventAttributes_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(nvtxEventAttributes_v2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nvtxEventAttributes_v2>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nvtxEventAttributes_v2>())).size as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nvtxEventAttributes_v2>())).category as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(category)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxEventAttributes_v2>())).colorType as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(colorType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nvtxEventAttributes_v2>())).color as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxEventAttributes_v2>())).payloadType as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(payloadType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxEventAttributes_v2>())).reserved0 as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(reserved0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nvtxEventAttributes_v2>())).payload as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(payload)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxEventAttributes_v2>())).messageType as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(messageType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nvtxEventAttributes_v2>())).message as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxEventAttributes_v2),
            "::",
            stringify!(message)
        )
    );
}
impl Default for nvtxEventAttributes_v2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type nvtxEventAttributes_t = nvtxEventAttributes_v2;
extern "C" {
    pub fn nvtxDomainMarkEx(domain: nvtxDomainHandle_t, eventAttrib: *const nvtxEventAttributes_t);
}
extern "C" {
    pub fn nvtxMarkEx(eventAttrib: *const nvtxEventAttributes_t);
}
extern "C" {
    pub fn nvtxMarkA(message: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn nvtxMarkW(message: *const wchar_t);
}
extern "C" {
    pub fn nvtxDomainRangeStartEx(
        domain: nvtxDomainHandle_t,
        eventAttrib: *const nvtxEventAttributes_t,
    ) -> nvtxRangeId_t;
}
extern "C" {
    pub fn nvtxRangeStartEx(eventAttrib: *const nvtxEventAttributes_t) -> nvtxRangeId_t;
}
extern "C" {
    pub fn nvtxRangeStartA(message: *const ::std::os::raw::c_char) -> nvtxRangeId_t;
}
extern "C" {
    pub fn nvtxRangeStartW(message: *const wchar_t) -> nvtxRangeId_t;
}
extern "C" {
    pub fn nvtxDomainRangeEnd(domain: nvtxDomainHandle_t, id: nvtxRangeId_t);
}
extern "C" {
    pub fn nvtxRangeEnd(id: nvtxRangeId_t);
}
extern "C" {
    pub fn nvtxDomainRangePushEx(
        domain: nvtxDomainHandle_t,
        eventAttrib: *const nvtxEventAttributes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvtxRangePushEx(eventAttrib: *const nvtxEventAttributes_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvtxRangePushA(message: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvtxRangePushW(message: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvtxDomainRangePop(domain: nvtxDomainHandle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvtxRangePop() -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum nvtxResourceGenericType_t {
    NVTX_RESOURCE_TYPE_UNKNOWN = 0,
    NVTX_RESOURCE_TYPE_GENERIC_POINTER = 65537,
    NVTX_RESOURCE_TYPE_GENERIC_HANDLE = 65538,
    NVTX_RESOURCE_TYPE_GENERIC_THREAD_NATIVE = 65539,
    NVTX_RESOURCE_TYPE_GENERIC_THREAD_POSIX = 65540,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvtxResourceAttributes_v0 {
    pub version: u16,
    pub size: u16,
    pub identifierType: i32,
    pub identifier: nvtxResourceAttributes_v0_identifier_t,
    pub messageType: i32,
    pub message: nvtxMessageValue_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nvtxResourceAttributes_v0_identifier_t {
    pub pValue: *const ::std::os::raw::c_void,
    pub ullValue: u64,
}
#[test]
fn bindgen_test_layout_nvtxResourceAttributes_v0_identifier_t() {
    assert_eq!(
        ::std::mem::size_of::<nvtxResourceAttributes_v0_identifier_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(nvtxResourceAttributes_v0_identifier_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<nvtxResourceAttributes_v0_identifier_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(nvtxResourceAttributes_v0_identifier_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxResourceAttributes_v0_identifier_t>())).pValue as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxResourceAttributes_v0_identifier_t),
            "::",
            stringify!(pValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxResourceAttributes_v0_identifier_t>())).ullValue as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxResourceAttributes_v0_identifier_t),
            "::",
            stringify!(ullValue)
        )
    );
}
impl Default for nvtxResourceAttributes_v0_identifier_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_nvtxResourceAttributes_v0() {
    assert_eq!(
        ::std::mem::size_of::<nvtxResourceAttributes_v0>(),
        32usize,
        concat!("Size of: ", stringify!(nvtxResourceAttributes_v0))
    );
    assert_eq!(
        ::std::mem::align_of::<nvtxResourceAttributes_v0>(),
        8usize,
        concat!("Alignment of ", stringify!(nvtxResourceAttributes_v0))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxResourceAttributes_v0>())).version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxResourceAttributes_v0),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nvtxResourceAttributes_v0>())).size as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxResourceAttributes_v0),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxResourceAttributes_v0>())).identifierType as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxResourceAttributes_v0),
            "::",
            stringify!(identifierType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxResourceAttributes_v0>())).identifier as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxResourceAttributes_v0),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxResourceAttributes_v0>())).messageType as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxResourceAttributes_v0),
            "::",
            stringify!(messageType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nvtxResourceAttributes_v0>())).message as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nvtxResourceAttributes_v0),
            "::",
            stringify!(message)
        )
    );
}
impl Default for nvtxResourceAttributes_v0 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type nvtxResourceAttributes_t = nvtxResourceAttributes_v0;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvtxResourceHandle {
    _unused: [u8; 0],
}
pub type nvtxResourceHandle_t = *mut nvtxResourceHandle;
extern "C" {
    pub fn nvtxDomainResourceCreate(
        domain: nvtxDomainHandle_t,
        attribs: *mut nvtxResourceAttributes_t,
    ) -> nvtxResourceHandle_t;
}
extern "C" {
    pub fn nvtxDomainResourceDestroy(resource: nvtxResourceHandle_t);
}
extern "C" {
    pub fn nvtxDomainNameCategoryA(
        domain: nvtxDomainHandle_t,
        category: u32,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn nvtxDomainNameCategoryW(domain: nvtxDomainHandle_t, category: u32, name: *const wchar_t);
}
extern "C" {
    pub fn nvtxNameCategoryA(category: u32, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn nvtxNameCategoryW(category: u32, name: *const wchar_t);
}
extern "C" {
    pub fn nvtxNameOsThreadA(threadId: u32, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn nvtxNameOsThreadW(threadId: u32, name: *const wchar_t);
}
extern "C" {
    pub fn nvtxDomainRegisterStringA(
        domain: nvtxDomainHandle_t,
        string: *const ::std::os::raw::c_char,
    ) -> nvtxStringHandle_t;
}
extern "C" {
    pub fn nvtxDomainRegisterStringW(
        domain: nvtxDomainHandle_t,
        string: *const wchar_t,
    ) -> nvtxStringHandle_t;
}
extern "C" {
    pub fn nvtxDomainCreateA(name: *const ::std::os::raw::c_char) -> nvtxDomainHandle_t;
}
extern "C" {
    pub fn nvtxDomainCreateW(name: *const wchar_t) -> nvtxDomainHandle_t;
}
extern "C" {
    pub fn nvtxDomainDestroy(domain: nvtxDomainHandle_t);
}
